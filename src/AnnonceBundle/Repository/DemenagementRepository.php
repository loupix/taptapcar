<?php

namespace AnnonceBundle\Repository;

/**
 * DemenagementRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class DemenagementRepository extends \Doctrine\ORM\EntityRepository
{


	public function genQuery($params, $lat, $lon){
		$query = $this->createQueryBuilder("dem")
			->leftJoin("dem.dateReguliers", "dat")
			->join("dem.annonce", "ann")
			->join("ann.auteur", "user")
			->innerJoin("user.clientAvis", "avi")
			->join("user.profile", "pro");


		$radius = $params['rayon'];
		if($radius=="" || $radius==null)
			$radius=200;


		list($lon_min, $lat_min, $lon_max, $lat_max) = $this->bounding_box($lat, $lon, $radius);


		$query->leftJoin("dem.ville", "ville")
			->orWhere($query->expr()->andX(
				$query->expr()->gte("ville.latitude", $lat_min),
				$query->expr()->lte("ville.latitude", $lat_max),
				$query->expr()->gte("ville.longitude", $lon_min),
				$query->expr()->lte("ville.longitude", $lon_max)
			));




		// list($lon_min, $lat_min, $lon_max, $lat_max) = $this->bounding_box($lat, $lon, $radius);


		$query->leftJoin("dem.depart", "dep")
			->orWhere($query->expr()->andX(
				$query->expr()->gte("dep.latitude", $lat_min),
				$query->expr()->lte("dep.latitude", $lat_max),
				$query->expr()->gte("dep.longitude", $lon_min),
				$query->expr()->lte("dep.longitude", $lon_max)
			));



		$query->leftJoin("dem.lieu", "lieu")
			->orWhere($query->expr()->andX(
				$query->expr()->gte("lieu.latitude", $lat_min),
				$query->expr()->lte("lieu.latitude", $lat_max),
				$query->expr()->gte("lieu.longitude", $lon_min),
				$query->expr()->lte("lieu.longitude", $lon_max)
			));



		// list($lon_min, $lat_min, $lon_max, $lat_max) = $this->bounding_box($lat, $lon, $radius);

		$query->leftJoin("dem.rendezVous", "rdv")
			->orWhere($query->expr()->andX(
				$query->expr()->gte("rdv.latitude", $lat_min),
				$query->expr()->lte("rdv.latitude", $lat_max),
				$query->expr()->gte("rdv.longitude", $lon_min),
				$query->expr()->lte("rdv.longitude", $lon_max)
			));



		// $query->andWhere($query->expr()->orX(
		// 	$query->expr()->gte("dat.date", $date),
		// 	$query->expr()->gte("dem.dateUnique", $date)
		// 	));

		if(!is_null($params['transporteur']))
			$query->andWhere($query->expr()->eq("dem.transporteur", $params['transporteur']));

		if(!is_null($params['note'])){
			// $subQuery = $this->createQueryBuilder("dem")
			// 	->select("ann.id")
			// 	->addSelect($query->expr()->avg('avi.note')." AS note")
			// 	->join("dem.annonce", "ann")
			// 	->join("ann.auteur", "user")
			// 	->innerJoin("user.clientAvis", "avi");

			// $subQuery->andWhere($query->expr()->gte("note", $params['note']))
			// 	->addGroupBy("ann");
			// $data = $subQuery->getQuery()->getResult();
			// print_r($data);
			// die();
			$query->having("AVG(avi.note) >= ".$params['note']);

		}
		





		if(!is_null($params['volume'])){
			$params['volume'] = str_replace(array("{",",", ":","}"), array('{"', '","', '":"', '"}'), $params['volume']);
			$params['volume'] = json_decode($params['volume'], true);
			if($params['volume']['min'] && $params['volume']['max']){
				$query->andWhere($query->expr()->eq("dem.volume", $params['volume']['min']."-".$params['volume']['max']));
			}else if($params['volume']['min'] && !$params['volume']['max']){
				$query->andWhere($query->expr()->eq("dem.volume", $params['volume']['min']."+"));
			}else if($params['volume']['max'] && !$params['volume']['min'])
				$query->andWhere($query->expr()->eq("dem.volume", "-".$params['volume']['max']));
		}


		if(!is_null($params['hauteur'])){
			$params['hauteur'] = str_replace(array("{",",", ":","}"), array('{"', '","', '":"', '"}'), $params['hauteur']);
			$params['hauteur'] = json_decode($params['hauteur'], true);
			if($params['hauteur']['min'] && $params['hauteur']['max']){
				$query->andWhere($query->expr()->eq("dem.hauteur", $params['hauteur']['min']."-".$params['hauteur']['max']));
			}else if($params['hauteur']['min'] && !$params['hauteur']['max']){
				$query->andWhere($query->expr()->eq("dem.hauteur", $params['hauteur']['min']));
			}else if($params['hauteur']['max'] && !$params['hauteur']['min'])
				$query->andWhere($query->expr()->eq("dem.hauteur", $params['hauteur']['max']));
		}


		if(!is_null($params['largeur'])){
			$params['largeur'] = str_replace(array("{",",", ":","}"), array('{"', '","', '":"', '"}'), $params['largeur']);
			$params['largeur'] = json_decode($params['largeur'], true);
			if($params['largeur']['min'] && $params['largeur']['max']){
				$query->andWhere($query->expr()->eq("dem.largeur", $params['largeur']['min']."-".$params['largeur']['max']));
			}else if($params['largeur']['min'] && !$params['largeur']['max']){
				$query->andWhere($query->expr()->eq("dem.largeur", $params['largeur']['min']));
			}else if($params['largeur']['max'] && !$params['largeur']['min'])
				$query->andWhere($query->expr()->eq("dem.largeur", $params['largeur']['max']));
		}

		if(!is_null($params['longueur'])){
			$params['longueur'] = str_replace(array("{",",", ":","}"), array('{"', '","', '":"', '"}'), $params['longueur']);
			$params['longueur'] = json_decode($params['longueur'], true);
			if($params['longueur']['min'] && $params['longueur']['max']){
				$query->andWhere($query->expr()->eq("dem.longueur", $params['longueur']['min']."-".$params['longueur']['max']));
			}else if($params['longueur']['min'] && !$params['longueur']['max']){
				$query->andWhere($query->expr()->eq("dem.longueur", $params['longueur']['min']));
			}else if($params['longueur']['max'] && !$params['longueur']['min'])
				$query->andWhere($query->expr()->eq("dem.longueur", $params['longueur']['max']));
		}


		if(!is_null($params['budget'])){
			$params['budget'] = str_replace(array("{",",", ":","}"), array('{"', '","', '":"', '"}'), $params['budget']);
			$params['budget'] = json_decode($params['budget'], true);
			if($params['budget']['min'] && $params['budget']['max']){
				$query->andWhere($query->expr()->eq("dem.tarif", $params['budget']['min']."-".$params['budget']['max']));
			}else if($params['budget']['min'] && !$params['budget']['max']){
				$query->andWhere($query->expr()->eq("dem.tarif", "+".$params['budget']['min']));
			}else if($params['budget']['max'] && !$params['budget']['min'])
				$query->andWhere($query->expr()->eq("dem.tarif", $params['budget']['max']));
		}



		if(!is_null($params['_tri']['heure']) && $params['_tri']['heure']){
			// $query->addOrderBy("dat.date", $params['_tri']['heure']);
			$query->addOrderBy("dem.dateUnique", $params['_tri']['heure']);
		}

		if(!is_null($params['_tri']['prix']) && $params['_tri']['prix'])
			$query->addOrderBy("dem.tarif", $params['_tri']['prix']);

		$query->andWhere("ann.actif=1")->addOrderBy("dem.urgent", "DESC");

		// if($params['note']){
		// 	if($params['note']['min'])
		// 		$query->andWhere("u.note>=".$params['note']['min']);
		// 	if($params['note']['max'])
		// 		$query->andWhere("u.note<=".$params['note']['max']);
		// }
		$query->addGroupBy("ann.id");
		return $query;
			
	}


	public function countAll($query){
		$res = $query->getQuery()
			->useQueryCache(true)->getResult();
		return count($res);
	}


	public function allPaginator($query, $first_result, $max_results = 20){
		return $query->setFirstResult($first_result)
			->setMaxResults($max_results)
			->getQuery()->useQueryCache(true)->getResult();

	}



	private function bounding_box($latitude_in_degrees, $longitude_in_degrees, $half_side_in_km){
		$radius  = 6371;
		
		$lat = deg2rad($latitude_in_degrees);
		$lon = deg2rad($longitude_in_degrees);
		
		$parallel_radius = $radius * cos($lat);
		
		$lat_min = $lat - $half_side_in_km/$radius;
		$lat_max = $lat + $half_side_in_km/$radius;
		$lon_min = $lon - $half_side_in_km/$parallel_radius;
		$lon_max = $lon + $half_side_in_km/$parallel_radius;
		
		$lat_min = rad2deg($lat_min);
		$lon_min = rad2deg($lon_min);
		$lat_max = rad2deg($lat_max);
		$lon_max = rad2deg($lon_max);
		
		
		
		return Array($lon_min, $lat_min, $lon_max, $lat_max);}


}
