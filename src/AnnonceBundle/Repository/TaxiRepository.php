<?php

namespace AnnonceBundle\Repository;
use Symfony\Component\HttpKernel\Exception\BadRequestHttpException;

/**
 * TaxiRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class TaxiRepository extends \Doctrine\ORM\EntityRepository
{


	public function genQuery($params, $lat, $lon){
		$query = $this->createQueryBuilder("taxi")
			->join("taxi.annonce", "ann")
			->join("ann.auteur", "user");

		$radius = $params['rayon'];

		if($radius=="" || $radius==null)
			$radius=200;

		list($lon_min, $lat_min, $lon_max, $lat_max) = $this->bounding_box($lat, $lon, $radius);

		$query->join("taxi.ville", "vill")
			->andWhere($query->expr()->andX(
				$query->expr()->gte("vill.latitude", $lat_min),
				$query->expr()->lte("vill.latitude", $lat_max),
				$query->expr()->gte("vill.longitude", $lon_min),
				$query->expr()->lte("vill.longitude", $lon_max)
			));

		if(!is_null($params['note']))
			$query->having("AVG(avi.note) >= ".$params['note']);


		if(!is_null($params['wifi']))
			$query->andWhere($query->expr()->eq("taxi.wifi", var_export($params['wifi'], true)));
		if(!is_null($params['greencab']))
			$query->andWhere($query->expr()->eq("taxi.greencab", var_export($params['greencab'], true)));
		if(!is_null($params['facture']))
			$query->andWhere($query->expr()->eq("taxi.facture", var_export($params['facture'], true)));
		if(!is_null($params['paiement']))
			$query->andWhere($query->expr()->like("taxi.paiements", "'%".$params['paiement']."%'"));
		if(!is_null($params['siegeBebe']))
			$query->andWhere($query->expr()->eq("taxi.siegeBebe", var_export($params['siegeBebe'], true)));
		if(!is_null($params['animaux']))
			$query->andWhere($query->expr()->eq("taxi.animaux", var_export($params['animaux'], true)));
		if(!is_null($params['secuSocial']))
			$query->andWhere($query->expr()->eq("taxi.secuSocial", var_export($params['secuSocial'], true)));




		if(!is_null($params['prix']) && $params['prix']){
			switch ($params['prix']) {
				case 'bas':
					$query->andWhere($query->expr()->lte("taxi.tarifJour", "100"));
					break;

				case 'moyen':
					$query->andWhere($query->expr()->lte("taxi.tarifJour", "800"));
					break;

				case 'haut':
					$query->andWhere($query->expr()->gte("taxi.tarifJour", "800"));
					break;
				
				default:
					# code...
					break;
			}
		}

		// $query->andWhere($query->expr()->andX(
		// 	$query->expr()->gte("taxi.heureDebut", date("'H:i:s'")),
		// 	$query->expr()->lte("taxi.heureFin", date("'H:i:s'"))
		// ));

		// if(!is_null($params['_tri']['heure']) && $params['_tri']['heure'])
		// 	$query->addOrderBy("taxi.date", $params['_tri']['heure']);

		if(!is_null($params['_tri']['prix']) && $params['_tri']['prix'])
			$query->addOrderBy("taxi.tarifJour", $params['_tri']['prix']);

		$query->andWhere("ann.actif=1");

		return $query;

	}


	public function getIp(){
		if (!empty($_SERVER['HTTP_CLIENT_IP'])) {
			$ip = $_SERVER['HTTP_CLIENT_IP'];
		} elseif (!empty($_SERVER['HTTP_X_FORWARDED_FOR'])) {
			$ip = $_SERVER['HTTP_X_FORWARDED_FOR'];
		} else {
			$ip = $_SERVER['REMOTE_ADDR'];
		}
		return $ip;
	}


	private function bounding_box($latitude_in_degrees, $longitude_in_degrees, $half_side_in_km){
		$radius  = 6371;
		
		$lat = deg2rad($latitude_in_degrees);
		$lon = deg2rad($longitude_in_degrees);
		
		$parallel_radius = $radius * cos($lat);
		
		$lat_min = $lat - $half_side_in_km/$radius;
		$lat_max = $lat + $half_side_in_km/$radius;
		$lon_min = $lon - $half_side_in_km/$parallel_radius;
		$lon_max = $lon + $half_side_in_km/$parallel_radius;
		
		$lat_min = rad2deg($lat_min);
		$lon_min = rad2deg($lon_min);
		$lat_max = rad2deg($lat_max);
		$lon_max = rad2deg($lon_max);
		
		
		
		return Array($lon_min, $lat_min, $lon_max, $lat_max);}


	public function countAll($query){
		return $query->select("COUNT(taxi.id)")
			->getQuery()->useQueryCache(true)
			->getSingleScalarResult();
	}


	public function allPaginator($query, $first_result, $max_results = 20){
		return $query->setFirstResult($first_result)
			->setMaxResults($max_results)
			->getQuery()->useQueryCache(true)->getResult();

	}


	public function isDay($datetime){
		$lat = 48.8534100;
        $lon = 2.3488000;

        $sunset = date_sunset(time(), SUNFUNCS_RET_DOUBLE, $lat, $lon, 96, 2);
        $sunrise = date_sunrise(time(), SUNFUNCS_RET_DOUBLE, $lat, $lon, 96, 2);
        $now = date("H", $datetime->getTimestamp()) + date("i", $datetime->getTimestamp()) / 60 + date("s", $datetime->getTimestamp()) / 3600;
        if(($now < $sunset) && ($now >= $sunrise))
        	return true;
        else
        	return false;
	}



	public function isDisponnible($id, $datetime){
		$query = $this->createQueryBuilder("taxi");
		$value = $query->join("taxi.annonce", "ann")->join("ann.reservations", "res")
			->select("COUNT(res.id)")
			->where($query->expr()->eq("taxi.id", $id))
			->andWhere($query->expr()->eq("res.date", "'"+$datetime->format("Y-m-d H:i:s")+"'"))
			->getQuery()->useQueryCache(true)
			->getSingleScalarResult();
		if($value>0)
			return false;

		$value = $query
			->select("COUNT(res.id)")
			->where($query->expr()->andX(
				$query->expr()->gte("taxi.heureDebut", "'"+$datetime->format("H:i:s")+"'"),
				$query->expr()->lte("taxi.heureFin", "'"+$datetime->format("H:i:s")+"'"),
				$query->expr()->eq("taxi.id", $id)
			))->getQuery()->useQueryCache(true)->getSingleScalarResult();

		if($value>0)
			return false;

		return true;
	}


}
