<?php

namespace AnnonceBundle\Repository;

/**
 * covoiturageRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class covoiturageRepository extends \Doctrine\ORM\EntityRepository
{


	public function genQuery($params, $from, $to, $date){
		$query = $this->createQueryBuilder("cov")
			->leftJoin("cov.dateReguliers", "dat")
			->join("cov.annonce", "ann")
			->join("ann.auteur", "user")
			->join("user.profile", "pro");


		list($lon_min, $lat_min, $lon_max, $lat_max) = $this->bounding_box($from[0], $from[1], 100);

		// print_r($from);
		// print_r(array($lon_min, $lat_min, $lon_max, $lat_max));
		// die();

		$query->join("cov.depart", "dep")
			->andWhere($query->expr()->andX(
				$query->expr()->gte("dep.latitude", $lat_min),
				$query->expr()->lte("dep.latitude", $lat_max),
				$query->expr()->gte("dep.longitude", $lon_min),
				$query->expr()->lte("dep.longitude", $lon_max)
			));


		list($lon_min, $lat_min, $lon_max, $lat_max) = $this->bounding_box($to[0], $to[1], 100);

		$query->join("cov.arrivee", "arr")
			->andWhere($query->expr()->andX(
				$query->expr()->gte("arr.latitude", $lat_min),
				$query->expr()->lte("arr.latitude", $lat_max),
				$query->expr()->gte("arr.longitude", $lon_min),
				$query->expr()->lte("arr.longitude", $lon_max)
			));


		$query->andWhere($query->expr()->orX(
			$query->expr()->gte("dat.date", $date),
			$query->expr()->gte("cov.dateUnique", $date)
			));


		if(!is_null($params['note']))
			$query->having("AVG(avi.note) >= ".$params['note']);



		if(!is_null($params['bagages']))
			$query->andWhere($query->expr()->like("cov.bagages", "'%".$params['bagages']."%'"));
		if(!is_null($params['preferences']))
			$query->andWhere($query->expr()->like("cov.preferences", "'%".$params['preferences']."%'"));

		if(!is_null($params['prix'])){
			switch ($params['prix']) {
				case 'faible':
					$query->andWhere($query->expr()->lte("cov.cout", "100"));
					break;

				case 'moyen':
					$query->andWhere($query->expr()->lte("cov.cout", "800"));
					break;

				case 'haut':
					$query->andWhere($query->expr()->gte("cov.cout", "800"));
					break;
				
				default:
					# code...
					break;
			}
		}


		if(!is_null($params['_tri']['heure']) && $params['_tri']['heure']){
			$query->addOrderBy("cov.dateUnique", $params['_tri']['heure']);
			$query->addOrderBy("dat.date", $params['_tri']['heure']);
		}

		if(!is_null($params['_tri']['prix']) && $params['_tri']['prix'])
			$query->addOrderBy("cov.tarif", $params['_tri']['prix']);

		$query->andWhere("ann.actif=1")->addOrderBy("cov.urgent", "ASC");
		$query->addGroupBy("ann.id");

		return $query;
			
	}


	public function countAll($query){
		$res = $query->getQuery()
		->useQueryCache(true)->getResult();
		return count($res);
	}


	public function allPaginator($query, $first_result, $max_results = 20){
		return $query->setFirstResult($first_result)
			->setMaxResults($max_results)
			->getQuery()->getResult();

	}


	private function bounding_box($latitude_in_degrees, $longitude_in_degrees, $half_side_in_km){
		$radius  = 6371;
		
		$lat = deg2rad($latitude_in_degrees);
		$lon = deg2rad($longitude_in_degrees);
		
		$parallel_radius = $radius * cos($lat);
		
		$lat_min = $lat - $half_side_in_km/$radius;
		$lat_max = $lat + $half_side_in_km/$radius;
		$lon_min = $lon - $half_side_in_km/$parallel_radius;
		$lon_max = $lon + $half_side_in_km/$parallel_radius;
		
		$lat_min = rad2deg($lat_min);
		$lon_min = rad2deg($lon_min);
		$lat_max = rad2deg($lat_max);
		$lon_max = rad2deg($lon_max);
		
		
		
		return Array($lon_min, $lat_min, $lon_max, $lat_max);}



	public function isDisponnible($id, $datetime, $nbPlaces){
		$query = $this->createQueryBuilder("cov");
		$value = $query->join("cov.annonce", "ann")->join("ann.reservations", "res")
			->where($query->expr()->eq("cov.id", $id))
			->andWhere($query->expr()->eq("res.date", "'"+$datetime->format("Y-m-d H:i:s")+"'"));
			
	}
}
