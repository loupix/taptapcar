<?php

namespace GeographieBundle\Repository;

/**
 * PlaceRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PlaceRepository extends \Doctrine\ORM\EntityRepository
{


	public function findByGoogleId($id){
		return $this->createQueryBuilder("p")
			->where("p.GoogleId = :id")
			->setParameter("id", $id)
			->getQuery()->getOneResult();
	}


	public function returnPlaceOrResult($place){
		$places = $this->createQueryBuilder("p")
			->where("p.latitude = :latitude")
			->andWhere("p.longitude = :longitude")
			->setParameter("latitude", $place->getLatitude())
			->setParameter("longitude", $place->getLongitude())
			->getQuery()->getOneResult();

		if(count($places)>0)
			return $places;

		// creer place
		$em = $this->getDoctrine()->getManager();
		// get ville
		$repository = $em->getRepository('GeographieBundle:Ville');
		$villes = $repository->findByName($name);

		if(count($villes)==0)
			return false;

		$em->persist($place);
		$em->flush();
		return $place;
	}


	public function findByAdresse($adresse){
		return $this->createQueryBuilder("p")
			->where("p.Adresse = :adresse")
			->setParameter("adresse", $adresse)
			->getQuery()->getOneResult();
	}


	public function getPlaceProche($lat, $lon, $radius){
		list($lon_min, $lat_min, $lon_max, $lat_max) = $this->bounding_box($lat, $lon, $radius);

		return $this->createQueryBuilder("p")
			->where("p.latitude < :minLat")
			->andWhere("p.latitude > :maxLat")
			->andWhere("p.longitude < :maxLon")
			->andWhere("p.longitude > :minLon")
			->setParameter("minLat", $lat_min)
			->setParameter("minLon", $lon_min)
			->setParameter("maxLat", $lat_max)
			->setParameter("maxLon", $lon_max)
			->getQuery()->getResult();

	}


	private function bounding_box($latitude_in_degrees, $longitude_in_degrees, $half_side_in_km){
		$radius  = 6371;
		
		$lat = deg2rad($latitude_in_degrees);
		$lon = deg2rad($longitude_in_degrees);
		
		$parallel_radius = $radius * cos($lat);
		
		$lat_min = $lat - $half_side_in_km/$radius;
		$lat_max = $lat + $alf_side_in_km/$radius;
		$lon_min = $lon - $half_side_in_km/$parallel_radius;
		$lon_max = $lon + $half_side_in_km/$parallel_radius;
		
		$lat_min = rad2deg($lat_min);
		$lon_min = rad2deg($lon_min);
		$lat_max = rad2deg($lat_max);
		$lon_max = rad2deg($lon_max);
		
		
		
		return Array($lon_min, $lat_min, $lon_max, $lat_max);}
}
