<?php

namespace UserBundle\Repository;

/**
 * NotificationRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class NotificationRepository extends \Doctrine\ORM\EntityRepository
{
	public function countNonLue($lue=false){
		try{
			return $this->createQueryBuilder("n")
				->select("count(n.id)")
				->join("n.user", "u")
				->where("u = :user")
				->andWhere("n.lue = :lue")
				->setParameter("user", $this->getUser())
				->setParameter("lue", $lue)
				->setMaxResults(1)
				->getQuery()->getSingleScalarResult();
		}catch(Exception $e){
			throw new Exception($e->getMessage());
		}
		
	}


	public function getAll($max=10, $order="asc"){
		try{
			return $this->createQueryBuilder("n")
				->orderBy("n.createdAt", $order)
				->setMaxResults($max)
				->getQuery()->getResult();
		}catch(Exception $e){
			throw new Exception($e->getMessage());
		}
	}


	public function get($id){
		$notif = $this->createQueryBuilder("n")
			->where("n.id = :id")
			->setParameter("id", $id)
			->getQuery()->getOneOrNullResult();

		if(is_null($notif))
			throw new Exception("Pas de notifications", 1);
	}


	public function setLue($id, $value=true){
		try{
			$notif = $this->get($id);
		}catch(Exception $e){
			throw new Exception($e->getMessage());
		}
		
		try{
			$em = $this->getDoctrine()->getManager();
			$notif->setLue($value);
			$em->persist($notif);
			$em->flush();
			return $notif;
		}catch(Exception $e){
			throw new Exception($e->getMessage());
		}
		
	}


	public function delNotif($id, $value=true){
		try{
			$notif = $this->get($id);
		}catch(Exception $e){
			throw new Exception($e->getMessage());
		}

		try{
			$em = $this->getDoctrine()->getManager();
			$notif->setSupprimer($value);
			$em->persist($notif);
			$em->flush();
			return $notif;
		}catch(Exception $e){
			throw new Exception($e->getMessage());
		}
	}
}
